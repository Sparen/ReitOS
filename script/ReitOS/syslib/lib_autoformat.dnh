/* ******************************************************************
* Sparen's Text AutoFormat Library
* For use with Touhou Danmakufu ph3
* (C) Sparen of Iria 2017
*
* Code in this library is under the MIT License and may be 
* redistributed/modified without express permission
****************************************************************** */

/* ******************************************************************
* This library is meant to handle text formatting in Danmakufu in a
* manner that can be considered 'cross-platform.'
****************************************************************** */

/* ******************************************************************
* Do note that there is significant overhead incurred by running these functions.
* It is not recommended that you use these functions on short snippets of text
* or text where you want to have manual line breaks.
* Only use these functions on larger blocks of text.
****************************************************************** */

/* *************************************************************************
* void autoformLineInsertionA1(string, int, string, int, int, constant) -- Tokenizes the input string and outputs the same string but with spaces replaced by [r] newlines when required.
    Essentially, this function provides proper word wrapping in Danmakufu.
    This function will freeze Danmakufu if maxwidth is shorter than the longest space delimited token (when rendered).
    This function (A1 variant) assumes all text to be boldfaced for safety concerns. No side pitch changes are assumed.
* Param: input (string) - String to format
* Param: maxwidth (int) - Maximum width of a line, must be larger than the longest space delimited token.
* Param: font (string) - Font being used; all fonts render at different widths
* Param: fontsize (int) - Size of the font being used
* Param: borderwidth (int) - Size of the font border being used
* Param: bordertype (constant) - Which border type is being used
*
* Usage: ObjText_SetText(objText, autoformLineInsertionA1("I'll cryo-freeze you together with some English beef! --Cirno", 344, "Helvetica", 14, 1, BORDER_FULL));
************************************************************************* */
function autoformLineInsertionA1(input, maxwidth, font, fontsize, borderwidth, bordertype) {
    let output = "";
    let tokenized = SplitString(input, " "); // Split the string into an array using the space " " as a delimiter
    while (length(tokenized) > 0) { // While there remain tokens to be processed
        let newline = ""; // Prepare the next line of text
        let ok = false; // Boolean for loop control
        while (!ok && length(tokenized) > 0) {
            // First, add the next token to the new line
            let backup = newline; // Used to restore newline in case of overflow
            newline = newline ~ tokenized[0] ~ " "; // Space is used as a buffer

            // Check if the new line is in bounds
            let tempobj = ObjText_Create();
            ObjText_SetText(tempobj, newline);
            ObjText_SetFontType(tempobj, font);
            ObjText_SetFontSize(tempobj, fontsize);
            ObjText_SetFontBold(tempobj, true);
            ObjText_SetFontBorderWidth(tempobj, borderwidth);
            ObjText_SetFontBorderType(tempobj, bordertype);

            let width = ObjText_GetTotalWidth(tempobj);

            // If in bounds, proceed with next token and erase the used token from the token array
            // Otherwise, the current line is complete. Exit loop.
            if (width < maxwidth) {
                tokenized = erase(tokenized, 0);
            } else {
                newline = backup; // Restore backup
                ok = true;
            }

            Obj_Delete(tempobj);
        }
        output = output ~ newline ~ "[r]";
    }
    return output;
}

/* *************************************************************************
* void autoformLineInsertionA2(string, obj, int) -- Tokenizes the input string and outputs the same string but with spaces replaced by [r] newlines when required. 
    Also assigns the string to the provided object.
    Essentially, this function provides proper word wrapping in Danmakufu.
    This function will freeze Danmakufu if maxwidth is shorter than the longest space delimited token (when rendered).
    The A2 variant performs checks and calculations directly on the provided parent object.
* Param: input (string) - String to format
* Param: parent (obj) - Parent object that will display the text. The function uses this parent as a template (for font size, etc.).
* Param: maxwidth (int) - Maximum width of a line, must be larger than the longest space delimited token.
*
* Usage: autoformLineInsertionA2("Aah! The cat turned into a cat! --Reimu", objText, 344);
************************************************************************* */
function autoformLineInsertionA2(input, parent, maxwidth) {
    let output = "";
    let tokenized = SplitString(input, " "); // Split the string into an array using the space " " as a delimiter
    while (length(tokenized) > 0) { // While there remain tokens to be processed
        let newline = ""; // Prepare the next line of text
        let ok = false; // Boolean for loop control
        while (!ok && length(tokenized) > 0) {
            // First, add the next token to the new line
            let backup = newline; // Used to restore newline in case of overflow
            newline = newline ~ tokenized[0] ~ " "; // Space is used as a buffer

            // Check if the new line is in bounds
            ObjText_SetText(parent, newline);

            let width = ObjText_GetTotalWidth(parent);

            // If in bounds, proceed with next token and erase the used token from the token array
            // Otherwise, the current line is complete. Exit loop.
            if (width < maxwidth) {
                tokenized = erase(tokenized, 0);
            } else {
                newline = backup; // Restore backup
                ok = true;
            }
        }
        output = output ~ newline ~ "[r]";
    }
    ObjText_SetText(parent, output);
    return output;
}
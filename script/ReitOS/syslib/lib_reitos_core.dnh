/* ******************************************************************
* ReitOS Core Library
* For use with Touhou Danmakufu ph3
* (C) Sparen of Iria 2018
*
* Code in this library is under the MIT License and may be 
* redistributed/modified without express permission
****************************************************************** */

/* ******************************************************************
* This library holds functions that allow for applications and other libraries to access the system
****************************************************************** */

/* ******************************************************************
* Dependencies:
* lib_reitos_window.dnh
****************************************************************** */

/* ******************************************************************
* Public Methods:
* Mouse_OnWindow()
* Mouse_OnDockIcon()
************************************************************************* */

/* *************************************************************************
* Mouse_OnWindow(objWindow) -- Determines if the mouse is present on the selected window + header.
* Return: true if mouse is on the specified window + header; false otherwise.
************************************************************************* */
function Mouse_OnWindow(objWindow) {
    // If window is closed, does not exist, or is minimized, return false
    if (Obj_GetValueD(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_CLOSED) == REITOS_WINDOW_STATUS_CLOSED || Obj_GetValueD(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_CLOSED) == REITOS_WINDOW_STATUS_MINIMIZED) {
        return false;
    }
    let mx = GetCommonData("reitos_mouse_x", 0);
    let my = GetCommonData("reitos_mouse_y", 0);
    // First check if the mouse is on the current window + header
    if (mx < Obj_GetValueD(objWindow, "reitos_window_x", 0) || mx > Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 0) || my < Obj_GetValueD(objWindow, "reitos_window_y", 0) || my > Obj_GetValueD(objWindow, "reitos_window_y", 0) + Obj_GetValueD(objWindow, "reitos_window_height", 0) + 32) {
        return false;
    }
    // Next go through the list of windows that are on Foreground or Background but are not the current window
    let currrunning = GetCommonData("reitos_running", []);
    let under = true; // Whether we are underneath the window (doesn't matter) or above the window (check for blocking)
    ascent(i in 0..length(currrunning)) {
        if (currrunning[i] == objWindow) {
            under = false;
        } else if (!under) {
            // Check dimensions. If mouse on this window (which renders above objWindow), then return false
            if (mx > Obj_GetValueD(currrunning[i], "reitos_window_x", 0) && mx < Obj_GetValueD(currrunning[i], "reitos_window_x", 0) + Obj_GetValueD(currrunning[i], "reitos_window_width", 0) && my > Obj_GetValueD(currrunning[i], "reitos_window_y", 0) && my < Obj_GetValueD(currrunning[i], "reitos_window_y", 0) + Obj_GetValueD(currrunning[i], "reitos_window_height", 0) + 32) {
                return false;
            }
        }
    }

    return true;
}

/* *************************************************************************
* Mouse_OnDockIcon(objDockIcon) -- Determines if the mouse is present on the selected dock icon.
* Return: true if mouse is on the specified dock icon; false otherwise.
* NOTE: This method does not require the dock icon library to be included.
************************************************************************* */
function Mouse_OnDockIcon(objDockIcon) {
    let mx = GetCommonData("reitos_mouse_x", 0);
    let my = GetCommonData("reitos_mouse_y", 0);
    // First check if the mouse is on the current dock icon. Note 3 pixel buffer 
    if (mx < Obj_GetValueD(objDockIcon, "reitos_dockicon_x", 0) + 3 || mx > Obj_GetValueD(objDockIcon, "reitos_dockicon_x", 0) + Obj_GetValueD(objDockIcon, "reitos_dockicon_width", 0) - 3 || my < (600 - 29) || my > 597) {
        return false;
    }
    return true;
}

/* ******************************************************************
* Sparen's Math Library
* For use with Touhou Danmakufu ph3
* (C) Sparen of Iria 2018
*
* Code in this library is under the MIT License and may be 
* redistributed/modified without express permission
****************************************************************** */

/* ******************************************************************
* This library contains a variety of mathematical operators and functions
* For speed, this library typically contains 'safe' (_s) and 'unsafe' versions of each function
* Functions in this library work on Integers (e.g. -1) and String forms of Integers (e.g. "-1")
****************************************************************** */

/* ******************************************************************
* Functions:
* stl_onescomplement(), stl_onescomplement_s()
* stl_bit_not(), stl_bit_not_s()
* stl_lshift(), stl_lshift_s()
* stl_rshift(), stl_rshift_s()
* stl_dectobin(), stl_dectobin_s()
* stl_bintodec(), stl_bintodec_s()
* stl_bit_and(), stl_bit_and_s()
* stl_bit_or(), stl_bit_or_s()
* stl_bit_xor(), stl_bit_xor_s()
************************************************************************* */

/* *************************************************************************
* stl_parseInt() -- Helper function that checks input typing, raising an exception under failure.
* Param: e (free) - Value (parsable to Integer) to check type of
* Param: fxn (string) - Name of function, for error handling
* Return: e as an Integer
* Notes:
*   -- Floats are truncated
*   -- Strings raise an error if they are not of the form (-)[0..9]*.[*]*
************************************************************************* */
function stl_parseInt(e, fxn) {
    // Forcefully parse out the integer component
    // Note that ToString(int) will provide a decimal point and trailing 0s
    // Unable to use atoi in this case because when you run it on a String without numbers it returns 0.0
    let x = SplitString(ToString(e), ".");
    // Length must be exactly two
    if (length(x) != 2) {
        RaiseError(fxn ~ ": Provided value not parsable to an Integer.");
    }
    // e2 is a string containing the Integer portion of the input
    let e2 = x[0];
    // Ensure every character in the string is one of '0'..'9' ('-' allowed for first character) using character comparison
    // The "" vs '' distinction is important here
    ascent(i in 0..length(e2)) {
        if((e2[i] < '0' || e2[i] > '9') && !(i == 0 && e2[i] == '-')) {
            RaiseError(fxn ~ ": Provided value not parsable to an Integer.");
        }
    }
    return ator(e2);
}

/* *************************************************************************
* stl_padbinstrings() -- Return the input strings with length standardized
* Param: earr (free []) - Array of binary strings to standardize length of
* Return: earr with 0-padded lengths
************************************************************************* */
function stl_padbinstrings(earr) {
    // First, get max length
    let maxlen = -1;
    ascent(i in 0..length(earr)) {
        if (length(earr[i]) > maxlen) {
            maxlen = length(earr[i]);
        }
    }
    // Now, pad strings
    ascent(i in 0..length(earr)) {
        let currstr = earr[i];
        let newstr = "";
        let diff = maxlen - length(currstr);
        ascent(j in 0..diff) {
            newstr = newstr ~ "0";
        }
        newstr = newstr ~ currstr;
        earr[i] = newstr;
    }
    return earr;
}

/* *************************************************************************
* stl_onescomplement() -- Return the one's complement of the input as an Integer.
* Param: e (free) - Value (parsable to Integer) to obtain one's complement of
* Return: One's complement of e
* Notes:
*   -- Use stl_onescomplement_s() [SAFE] for error checking on input or for floating point inputs that need to be truncated
************************************************************************* */
function stl_onescomplement(e) {
    return -1 - e;
}

/* *************************************************************************
* stl_onescomplement_s() [SAFE] -- Return the one's complement of the input as an Integer.
* Param: e (free) - Value (parsable to Integer) to obtain one's complement of
* Return: One's complement of e
* Exception:
*   -- If e is not parsable to an Integer
* Notes:
************************************************************************* */
function stl_onescomplement_s(e) {
    return stl_onescomplement(stl_parseInt(e, "stl_onescomplement_s"));
}

/* *************************************************************************
* stl_bit_not() -- Return the bitwise NOT of the input as an Integer.
* Param: e (free) - Value (parsable to Integer) to obtain bitwise NOT of
* Return: Bitwise NOT of e
* Notes:
*   -- Use stl_bit_not_s() [SAFE] for error checking on input or for floating point inputs that need to be truncated
*   -- This function is a wrapper for stl_onescomplement()
************************************************************************* */
function stl_bit_not(e) {
    return stl_onescomplement(e);
}

/* *************************************************************************
* stl_bit_not_s() [SAFE] -- Return the bitwise NOT of the input as an Integer.
* Param: e (free) - Value (parsable to Integer) to obtain bitwise NOT of
* Return: Bitwise NOT of e
* Exception:
*   -- If e is not parsable to an Integer
* Notes:
*   -- This function is a wrapper for stl_onescomplement()
************************************************************************* */
function stl_bit_not_s(e) {
    return stl_onescomplement_s(e);
}

/* *************************************************************************
* stl_lshift() -- Return the input left shifted n times.
* Param: e (free) - Value (parsable to Integer) to left shift
* Param: n (int) - Number of times to left shift
* Return: e << n
* Notes:
*   -- Use stl_lshift_s() [SAFE] for error checking on input or for floating point inputs that need to be truncated
************************************************************************* */
function stl_lshift(e, n) {
    let x = e;
    ascent(i in 0..n) {
        x *= 2;
    }
    return x;
}

/* *************************************************************************
* stl_lshift_s() -- Return the input left shifted n times.
* Param: e (free) - Value (parsable to Integer) to left shift
* Param: n (int) - Number of times to left shift
* Return: e << n
************************************************************************* */
function stl_lshift_s(e, n) {
    return stl_lshift(stl_parseInt(e, "stl_lshift_s"), n);
}

/* *************************************************************************
* stl_rshift() -- Return the input right shifted n times.
* Param: e (free) - Value (parsable to Integer) to right shift
* Param: n (int) - Number of times to right shift
* Return: e >> n
* Notes:
*   -- Use stl_rshift_s() [SAFE] for error checking on input or for floating point inputs that need to be truncated
************************************************************************* */
function stl_rshift(e, n) {
    let x = e;
    ascent(i in 0..n) {
        x /= 2;
        // Ceiling for negatives, Floor/Truncate for positives
        if (e >= 0) {
            x = floor(x);
        } else {
            x = ceil(x);
        }
    }
    return x;
}

/* *************************************************************************
* stl_rshift_s() -- Return the input right shifted n times.
* Param: e (free) - Value (parsable to Integer) to right shift
* Param: n (int) - Number of times to right shift
* Return: e >> n
************************************************************************* */
function stl_rshift_s(e, n) {
    return stl_rshift(stl_parseInt(e, "stl_rshift_s"), n);
}

/* *************************************************************************
* stl_dectobin() -- Return the input as a binary string.
* Param: e (free) - Value (parsable to Integer) to return as binary string
* Return: e as a binary string
* Notes:
*   -- Use stl_tobinary_s() [SAFE] for error checking on input or for floating point inputs that need to be truncated
*   -- This function stops working correctly past 9999999999999998? due to Danmakufu's internals defaulting to scientific notation? (verification needed)
*   -- Only designed for usage on Whole Numbers
************************************************************************* */
function stl_dectobin(e) {
    if (e < 0) {
        RaiseError("stl_dectobin: Negative values are not supported.");
    }
    // This case tends to mess things up
    if (e == 0) {
        return "0";
    }
    let strlen = 0;
    // First, we must determine how many digits are in the binary string. 
    while(e >= 2^strlen) {
        strlen += 1;
    }
    // Now we form the string.
    let output = "";
    let x = e;
    while (strlen > 0) {
        let component = 2^(strlen-1);
        if (x >= component) {
            output = output ~ "1";
            x -= component;
        } else {
            output = output ~ "0";
        }
        strlen -= 1;
    }
    return output;
}

/* *************************************************************************
* stl_dectobin_s() -- Return the input as a binary string.
* Param: e (free) - Value (parsable to Integer) to return as binary string
* Return: e as a binary string
************************************************************************* */
function stl_dectobin_s(e) {
    return stl_dectobin(stl_parseInt(e, "stl_dectobin_s"));
}

/* *************************************************************************
* stl_bintodec() -- Return the input as a decimal integer.
* Param: e (string) - Binary string to return as decimal integer
* Return: e as a decimal integer
* Notes:
*   -- Use stl_todecimal_s() [SAFE] for error checking on input
*   -- Only designed for usage on Whole Numbers
************************************************************************* */
function stl_bintodec(e) {
    let strlen = length(e);
    let output = 0;
    ascent (i in 0..strlen) {
        let component = 2^(strlen-1-i);
        if (e[i] == '1') {
            output += component;
        }
        // Otherwise nothing happens
    }
    return output;
}

/* *************************************************************************
* stl_bintodec_s() -- Return the input as a decimal integer.
* Param: e (free) - Binary string to return as decimal integer
* Return: e as a decimal integer
************************************************************************* */
function stl_bintodec_s(e) {
    // Ensure every character in the string is one of '0'..'9' using character comparison
    // The "" vs '' distinction is important here
    ascent(i in 0..length(e)) {
        if (e[i] < '0' || e[i] > '1') {
            RaiseError("stl_bintodec_s: Provided value not a Binary String.");
        }
    }
    return stl_bintodec(e);
}

/* *************************************************************************
* stl_bit_and() -- Return the bitwise AND of the inputs as an Integer.
* Param: e1 (free) - Value (parsable to Integer) to obtain bitwise AND of
* Param: e2 (free) - Value (parsable to Integer) to obtain bitwise AND of
* Return: Bitwise AND of e1 and e2
* Notes:
*   -- Use stl_bit_and_s() [SAFE] for error checking on input or for floating point inputs that need to be truncated
************************************************************************* */
function stl_bit_and(e1, e2) {
    // First, convert to Binary String
    let arr = [stl_dectobin(e1), stl_dectobin(e2)];
    // Next, pad lengths
    arr = stl_padbinstrings(arr);
    // Finally, perform binary AND
    let binout = "";
    ascent(i in 0..length(arr[0])) {
        if (arr[0][i] == '1' && arr[1][i] == '1') {
            binout = binout ~ "1";
        } else {
            binout = binout ~ "0";
        }
    }
    return stl_bintodec_s(binout);
}

/* *************************************************************************
* stl_bit_and_s() [SAFE] -- Return the bitwise AND of the inputs as an Integer.
* Param: e1 (free) - Value (parsable to Integer) to obtain bitwise AND of
* Param: e2 (free) - Value (parsable to Integer) to obtain bitwise AND of
* Return: Bitwise AND of e1 and e2
* Exception:
*   -- If e1 or e2 is not parsable to an Integer
************************************************************************* */
function stl_bit_and_s(e1, e2) {
    return stl_bit_and(stl_parseInt(e1, "stl_bit_not_s"), stl_parseInt(e2, "stl_bit_not_s"));
}

/* *************************************************************************
* stl_bit_or() -- Return the bitwise OR of the inputs as an Integer.
* Param: e1 (free) - Value (parsable to Integer) to obtain bitwise OR of
* Param: e2 (free) - Value (parsable to Integer) to obtain bitwise OR of
* Return: Bitwise OR of e1 and e2
* Notes:
*   -- Use stl_bit_and_s() [SAFE] for error checking on input or for floating point inputs that need to be truncated
************************************************************************* */
function stl_bit_or(e1, e2) {
    // First, convert to Binary String
    let arr = [stl_dectobin(e1), stl_dectobin(e2)];
    // Next, pad lengths
    arr = stl_padbinstrings(arr);
    // Finally, perform binary OR
    let binout = "";
    ascent(i in 0..length(arr[0])) {
        if (arr[0][i] == '1' || arr[1][i] == '1') {
            binout = binout ~ "1";
        } else {
            binout = binout ~ "0";
        }
    }
    return stl_bintodec_s(binout);
}

/* *************************************************************************
* stl_bit_or_s() [SAFE] -- Return the bitwise OR of the inputs as an Integer.
* Param: e1 (free) - Value (parsable to Integer) to obtain bitwise OR of
* Param: e2 (free) - Value (parsable to Integer) to obtain bitwise OR of
* Return: Bitwise OR of e1 and e2
* Exception:
*   -- If e1 or e2 is not parsable to an Integer
************************************************************************* */
function stl_bit_or_s(e1, e2) {
    return stl_bit_or(stl_parseInt(e1, "stl_bit_not_s"), stl_parseInt(e2, "stl_bit_not_s"));
}


/* *************************************************************************
* stl_bit_xor() -- Return the bitwise XOR of the inputs as an Integer.
* Param: e1 (free) - Value (parsable to Integer) to obtain bitwise XOR of
* Param: e2 (free) - Value (parsable to Integer) to obtain bitwise XOR of
* Return: Bitwise XOR of e1 and e2
* Notes:
*   -- Use stl_bit_and_s() [SAFE] for error checking on input or for floating point inputs that need to be truncated
************************************************************************* */
function stl_bit_xor(e1, e2) {
    // First, convert to Binary String
    let arr = [stl_dectobin(e1), stl_dectobin(e2)];
    // Next, pad lengths
    arr = stl_padbinstrings(arr);
    // Finally, perform binary XOR
    let binout = "";
    ascent(i in 0..length(arr[0])) {
        if ((arr[0][i] == '1' || arr[1][i] == '1') && arr[0][i] != arr[1][i]) {
            binout = binout ~ "1";
        } else {
            binout = binout ~ "0";
        }
    }
    return stl_bintodec_s(binout);
}

/* *************************************************************************
* stl_bit_xor_s() [SAFE] -- Return the bitwise XOR of the inputs as an Integer.
* Param: e1 (free) - Value (parsable to Integer) to obtain bitwise XOR of
* Param: e2 (free) - Value (parsable to Integer) to obtain bitwise XOR of
* Return: Bitwise XOR of e1 and e2
* Exception:
*   -- If e1 or e2 is not parsable to an Integer
************************************************************************* */
function stl_bit_xor_s(e1, e2) {
    return stl_bit_xor(stl_parseInt(e1, "stl_bit_not_s"), stl_parseInt(e2, "stl_bit_not_s"));
}
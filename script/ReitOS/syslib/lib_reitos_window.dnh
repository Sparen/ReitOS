/* ******************************************************************
* ReitOS Windowing Library
* For use with Touhou Danmakufu ph3
* (C) Sparen of Iria 2018
*
* Code in this library is under the MIT License and may be 
* redistributed/modified without express permission
****************************************************************** */

/* ******************************************************************
* This library allows for the creation of windows in ReitOS. These have a 32 pixel header.
* x and y refer to top left of window HEADER, and the header is not included in the height.
* For library brevity, set and get methods will not be provided.
* It is recommended that Obj_SetValue/Obj_GetValueD be used directly.
****************************************************************** */

/* ******************************************************************
* Dependencies:
* lib_reitos_core.dnh
****************************************************************** */

/* ******************************************************************
* Public Methods:
* ObjWindow_Create()
* ObjWindow_AddComponent()
* ObjWindow_RemoveComponent()
* ObjWindow_Destroy()
*
* Fields:
* x, y (refer to top left of header)
* height, width (height does not include 32 pixel header)
* type (window type; see constants below)
* status (status of window; see constants below)
* name (name of window)
* icon (icon for window)
* components (objects that are positioned relative to the window)
************************************************************************* */

let REITOS_WINDOW_TYPE_REGULAR = 1;

let REITOS_WINDOW_STATUS_FOREGROUND = 1;
let REITOS_WINDOW_STATUS_BACKGROUND = 2;
let REITOS_WINDOW_STATUS_MINIMIZED = 3;
let REITOS_WINDOW_STATUS_CLOSED = 4;

let REITOS_WINDOW_HEADER_SIZE = 24;
let REITOS_WINDOW_HEADER_TEXTOFFSET = 4; // 5 for header size of 24, 8 for a header size of 32

/* *************************************************************************
* ObjWindow_Create(type, height, width, name, icon) -- Creates a new Window Object.
* Return: New Window Object
************************************************************************* */
function ObjWindow_Create(type, height, width, name, icon) {
    // Create a new Window Object using a primitive object as a wrapper
    let objWindow = ObjPrim_Create(OBJ_SPRITE_2D);
    // Set fields
    Obj_SetValue(objWindow, "reitos_window_type", type);
    if (height > 600 - 96) {
        WriteLog("WARNING: ObjWindow_Create: Maximum allowed height is 504 pixels. Limiting to 504 pixels.")
    }
    Obj_SetValue(objWindow, "reitos_window_height", min(height, 600 - 96));
    if (width > 800) {
        WriteLog("WARNING: ObjWindow_Create: Maximum allowed width is 800 pixels. Limiting to 800 pixels.")
    }
    Obj_SetValue(objWindow, "reitos_window_width", min(width, 800));
    // New windows default to center of screen
    Obj_SetValue(objWindow, "reitos_window_x", 400 - width/2);
    Obj_SetValue(objWindow, "reitos_window_y", 300 - height/2 - REITOS_WINDOW_HEADER_SIZE/2);
    // New windows are in the foreground
    Obj_SetValue(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_FOREGROUND);
    Obj_SetValue(objWindow, "reitos_window_name", name);
    Obj_SetValue(objWindow, "reitos_window_icon", icon);
    Obj_SetValue(objWindow, "reitos_window_components", []);

    // Create window components
    Obj_SetRenderPriorityI(objWindow, 90);
    ObjPrim_SetTexture(objWindow, GetCurrentScriptDirectory() ~ "../sysimg/dot.jpg");
    ObjSprite2D_SetSourceRect(objWindow, 0, 0, 1, 1);
    ObjSprite2D_SetDestRect(objWindow, 0, REITOS_WINDOW_HEADER_SIZE, Obj_GetValueD(objWindow, "reitos_window_width", 32), Obj_GetValueD(objWindow, "reitos_window_height", 32) + REITOS_WINDOW_HEADER_SIZE);
    ObjRender_SetColor(objWindow, 0, 0, 0);
    ObjRender_SetPosition(objWindow, Obj_GetValueD(objWindow, "reitos_window_x", 0), Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE, 0);

    // Force all other windows to background
    NotifyEventAll(EV_USER_PACKAGE + 12, objWindow);

    // Call update tasks on components
    __LIB_REITOS_WINDOW_Header(objWindow);
    __LIB_REITOS_WINDOW_Draw(objWindow);

    return objWindow;
}

/* *************************************************************************
* ObjWindow_AddComponent(objWindow, component) -- Adds a component to the Window
************************************************************************* */
function ObjWindow_AddComponent(objWindow, component) {
    let components = Obj_GetValueD(objWindow, "reitos_window_components", []);
    components = components ~ [component];
    Obj_SetValue(objWindow, "reitos_window_components", components);
}

/* *************************************************************************
* ObjWindow_RemoveComponent(objWindow, component) -- Removes a component from the Window
************************************************************************* */
function ObjWindow_RemoveComponent(objWindow, component) {
    let components = Obj_GetValueD(objWindow, "reitos_window_components", []);
    ascent(i in 0..length(components)) {
        if (components[i] == component) {
            erase(components, i);
        }
    }
    Obj_SetValue(objWindow, "reitos_window_components", components);
}

/* *************************************************************************
* ObjWindow_Destroy(objWindow) -- Destroys the Window and all components. 
* Header and Header Components should be destroyed seperately
************************************************************************* */
function ObjWindow_Destroy(objWindow) {
    // Destroy all components
    let components = Obj_GetValueD(objWindow, "reitos_window_components", []);
    ascent(i in 0..length(components)) {
        Obj_Delete(components[i]);
    }
    // Unstage Window from Bottom Bar
    NotifyEventAll(EV_USER_PACKAGE + 11, objWindow);
    // Delete Window
    Obj_Delete(objWindow);
}

// Draws Header and Header Components
task __LIB_REITOS_WINDOW_Header(objWindow) {
    // Create the header
    // Our first vertex is in the center of the window, the next six are the points, the last closes the bottom and is the same as the first.
    let objHeader = ObjPrim_Create(OBJ_PRIMITIVE_2D);
    ObjPrim_SetPrimitiveType(objHeader, PRIMITIVE_TRIANGLEFAN);
    ObjPrim_SetVertexCount(objHeader, 8);
    Obj_SetRenderPriorityI(objHeader, 90); // Window is above all desktop items but below user-controlled area
    ObjPrim_SetTexture(objHeader, GetCurrentScriptDirectory() ~ "../sysimg/dot.jpg");
    ObjRender_SetPosition(objHeader, Obj_GetValueD(objWindow, "reitos_window_x", 0), Obj_GetValueD(objWindow, "reitos_window_y", 0), 0);
    ObjPrim_SetVertexPosition(objHeader, 0, Obj_GetValueD(objWindow, "reitos_window_width", 0) / 2, REITOS_WINDOW_HEADER_SIZE / 2, 0);
    ObjPrim_SetVertexPosition(objHeader, 1, 0, REITOS_WINDOW_HEADER_SIZE, 0);
    ObjPrim_SetVertexPosition(objHeader, 2, 0, 4, 0);
    ObjPrim_SetVertexPosition(objHeader, 3, 4, 0, 0);
    ObjPrim_SetVertexPosition(objHeader, 4, Obj_GetValueD(objWindow, "reitos_window_width", 0) - 4, 0, 0);
    ObjPrim_SetVertexPosition(objHeader, 5, Obj_GetValueD(objWindow, "reitos_window_width", 0), 4, 0);
    ObjPrim_SetVertexPosition(objHeader, 6, Obj_GetValueD(objWindow, "reitos_window_width", 0), REITOS_WINDOW_HEADER_SIZE, 0);
    ObjPrim_SetVertexPosition(objHeader, 7, 0, REITOS_WINDOW_HEADER_SIZE, 0);
    ObjPrim_SetVertexUVT(objHeader, 0, 0.5, 0.5);
    ObjPrim_SetVertexUVT(objHeader, 1, 0, 1);
    ObjPrim_SetVertexUVT(objHeader, 2, 0, 0);
    ObjPrim_SetVertexUVT(objHeader, 3, 0, 0);
    ObjPrim_SetVertexUVT(objHeader, 4, 1, 1);
    ObjPrim_SetVertexUVT(objHeader, 5, 1, 1);
    ObjPrim_SetVertexUVT(objHeader, 6, 1, 1);
    ObjPrim_SetVertexUVT(objHeader, 7, 0, 1);
    // Header color set in while loop. Change it there.

    // Create text object with name, as well as minimize and close buttons
    let objText = ObjText_Create();
    Obj_SetRenderPriorityI(objText, 90);
    ObjText_SetText(objText, Obj_GetValueD(objWindow, "reitos_window_name", "unknown application"));
    ObjText_SetFontSize(objText, 16);
    ObjText_SetFontBold(objText, false);
    ObjText_SetFontType(objText, "Helvetica");
    ObjText_SetFontColorTop(objText, 32, 32, 32);
    ObjText_SetFontColorBottom(objText, 32, 32, 32);
    ObjText_SetFontBorderType(objText, BORDER_NONE);
    ObjText_SetHorizontalAlignment(objText, ALIGNMENT_LEFT);
    ObjRender_SetPosition(objText, Obj_GetValueD(objWindow, "reitos_window_x", 0) + 32, Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_TEXTOFFSET, 1);

    let objClose = ObjPrim_Create(OBJ_SPRITE_2D);
    Obj_SetRenderPriorityI(objClose, 90);
    ObjPrim_SetTexture(objClose, GetCurrentScriptDirectory() ~ "../sysimg/dot.jpg");
    ObjSprite2D_SetSourceRect(objClose, 0, 0, 16, 16);
    ObjSprite2D_SetDestCenter(objClose);
    ObjRender_SetColor(objClose, 255, 32, 32);
    ObjRender_SetPosition(objClose, Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 16, Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2, 0);

    let objMinimize = ObjPrim_Create(OBJ_SPRITE_2D);
    Obj_SetRenderPriorityI(objMinimize, 90);
    ObjPrim_SetTexture(objMinimize, GetCurrentScriptDirectory() ~ "../sysimg/dot.jpg");
    ObjSprite2D_SetSourceRect(objMinimize, 0, 0, 16, 16);
    ObjSprite2D_SetDestCenter(objMinimize);
    ObjRender_SetColor(objMinimize, 255, 255, 32);
    ObjRender_SetPosition(objMinimize, Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 40, Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2, 0);

    let status = Obj_GetValueD(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_CLOSED);
    let dragstate = false;
    let dragoffset = [0, 0]; // Last position of mouse (for drag)
    while (status != REITOS_WINDOW_STATUS_CLOSED) {
        // Handle clicks. Header: If Foreground, enable drag. If Background, then set to foreground. Close/Minimize only work if foreground.
        // Check mouse status
        let mx = GetCommonData("reitos_mouse_x", 0);
        let my = GetCommonData("reitos_mouse_y", 0);

        if (Mouse_OnWindow(objWindow)) { // Note that this checks if the mouse is on the WINDOW, not just the header.
            if (GetCommonData("reitos_mouse_statel", KEY_FREE) == KEY_PUSH && Obj_GetValueD(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_CLOSED) == REITOS_WINDOW_STATUS_BACKGROUND) {
                Obj_SetValue(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_FOREGROUND);
                // Notify package that existing foreground window must be moved to background
                NotifyEventAll(EV_USER_PACKAGE + 12, objWindow);
            }
            // Close/Minimize. Naturally, these only work if Foreground. If was background, it has now been set to foreground.
            if (GetCommonData("reitos_mouse_statel", KEY_FREE) == KEY_PULL && Obj_GetValueD(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_CLOSED) == REITOS_WINDOW_STATUS_FOREGROUND &&
                    mx > (Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 24) && mx < (Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 8) && my > Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2 - 8 && my < Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2 + 8) {
                // Close Window
                Obj_SetValue(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_CLOSED); // Tell __LIB_REITOS_WINDOW_Draw to delete the window and components
                NotifyEventAll(EV_USER_PACKAGE + 11, objWindow); // Unstage the Window
            }
            if (GetCommonData("reitos_mouse_statel", KEY_FREE) == KEY_PULL && Obj_GetValueD(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_CLOSED) == REITOS_WINDOW_STATUS_FOREGROUND &&
                    mx > (Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 48) && mx < (Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 32) && my > Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2 - 8 && my < Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2 + 8) {
                // Minimize Window
                Obj_SetValue(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_MINIMIZED);
            }
        }

        // Drag Handling (if foreground and header is being clicked OR currently dragging)
        // Drag Handling for header must come AFTER checking mouse status, or background windows cannot be immediately dragged.
        // Dragging not allowed if the user selects the area on close or minimize buttons.
        if (Obj_GetValueD(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_CLOSED) == REITOS_WINDOW_STATUS_FOREGROUND && 
                (dragstate || (mx > Obj_GetValueD(objWindow, "reitos_window_x", 0) && mx < (Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32)) && my > Obj_GetValueD(objWindow, "reitos_window_y", 0) && my < Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE)) &&
                !(mx > (Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 24) && mx < (Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 8) && my > Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2 - 8 && my < Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2 + 8) &&
                !(mx > (Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 48) && mx < (Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 32) && my > Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2 - 8 && my < Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2 + 8)) {
            if (GetCommonData("reitos_mouse_statel", KEY_FREE) == KEY_PUSH) {
                dragstate = true;
                dragoffset = [mx, my];
            }
            if (GetCommonData("reitos_mouse_statel", KEY_FREE) == KEY_HOLD) {
                if (dragstate) {
                    let lastxoff = mx - dragoffset[0];
                    let lastyoff = my - dragoffset[1];
                    // New x and y lock windows to bounds
                    let newx = max(0, min(800 - Obj_GetValueD(objWindow, "reitos_window_width", 32), Obj_GetValueD(objWindow, "reitos_window_x", 0) + lastxoff));
                    let newy = max(32, min(600 - Obj_GetValueD(objWindow, "reitos_window_height", 32) - 32 - REITOS_WINDOW_HEADER_SIZE, Obj_GetValueD(objWindow, "reitos_window_y", 0) + lastyoff)); // Must consider bounds with top bar, bottom bar, and header, each of which is 32 pixels
                    Obj_SetValue(objWindow, "reitos_window_x", newx);
                    Obj_SetValue(objWindow, "reitos_window_y", newy);
                    dragoffset = [mx, my]; // Update for next frame
                }
            }
            if (GetCommonData("reitos_mouse_statel", KEY_FREE) == KEY_PULL) {
                dragstate = false;
                dragoffset = [0, 0]; // Reset
            }
        }

        // Handle drawing. Must occur last.
        status = Obj_GetValueD(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_CLOSED);
        if (status == REITOS_WINDOW_STATUS_FOREGROUND) {
            Obj_SetVisible(objHeader, true);
            Obj_SetVisible(objText, true);
            Obj_SetVisible(objClose, true);
            Obj_SetVisible(objMinimize, true);
            ObjRender_SetPosition(objHeader, Obj_GetValueD(objWindow, "reitos_window_x", 0), Obj_GetValueD(objWindow, "reitos_window_y", 0), 0);
            ObjRender_SetPosition(objText, Obj_GetValueD(objWindow, "reitos_window_x", 0) + 8, Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_TEXTOFFSET, 1);
            ObjRender_SetPosition(objClose, Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 16, Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2, 0);
            ObjRender_SetPosition(objMinimize, Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 40, Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2, 0);
            ObjPrim_SetVertexColor(objHeader, 0, 168, 200, 224);
            ObjPrim_SetVertexColor(objHeader, 1, 168, 188, 224);
            ObjPrim_SetVertexColor(objHeader, 2, 168, 200, 224);
            ObjPrim_SetVertexColor(objHeader, 3, 168, 212, 224);
            ObjPrim_SetVertexColor(objHeader, 4, 168, 212, 224);
            ObjPrim_SetVertexColor(objHeader, 5, 168, 200, 224);
            ObjPrim_SetVertexColor(objHeader, 6, 168, 188, 224);
            ObjPrim_SetVertexColor(objHeader, 7, 168, 188, 224);
            ObjRender_SetAlpha(objText, 255);
            Obj_SetRenderPriorityI(objHeader, 90);
            Obj_SetRenderPriorityI(objText, 90);
            Obj_SetRenderPriorityI(objClose, 90);
            Obj_SetRenderPriorityI(objMinimize, 90);
        } else if (status == REITOS_WINDOW_STATUS_BACKGROUND) {
            Obj_SetVisible(objHeader, true);
            Obj_SetVisible(objText, true);
            Obj_SetVisible(objClose, true);
            Obj_SetVisible(objMinimize, true);
            ObjRender_SetPosition(objHeader, Obj_GetValueD(objWindow, "reitos_window_x", 0), Obj_GetValueD(objWindow, "reitos_window_y", 0), 0);
            ObjRender_SetPosition(objText, Obj_GetValueD(objWindow, "reitos_window_x", 0) + 8, Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_TEXTOFFSET, 1);
            ObjRender_SetPosition(objClose, Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 16, Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2, 0);
            ObjRender_SetPosition(objMinimize, Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(objWindow, "reitos_window_width", 32) - 40, Obj_GetValueD(objWindow, "reitos_window_y", 0) + REITOS_WINDOW_HEADER_SIZE/2, 0);
            ObjPrim_SetVertexColor(objHeader, 0, 168-16, 200-16, 224-16);
            ObjPrim_SetVertexColor(objHeader, 1, 168-16, 188-16, 224-16);
            ObjPrim_SetVertexColor(objHeader, 2, 168-16, 200-16, 224-16);
            ObjPrim_SetVertexColor(objHeader, 3, 168-16, 212-16, 224-16);
            ObjPrim_SetVertexColor(objHeader, 4, 168-16, 212-16, 224-16);
            ObjPrim_SetVertexColor(objHeader, 5, 168-16, 200-16, 224-16);
            ObjPrim_SetVertexColor(objHeader, 6, 168-16, 188-16, 224-16);
            ObjPrim_SetVertexColor(objHeader, 7, 168-16, 188-16, 224-16);
            ObjRender_SetAlpha(objText, 128);
            Obj_SetRenderPriorityI(objHeader, 10);
            Obj_SetRenderPriorityI(objText, 10);
            Obj_SetRenderPriorityI(objClose, 10);
            Obj_SetRenderPriorityI(objMinimize, 10);
        } else if (status == REITOS_WINDOW_STATUS_MINIMIZED) {
            Obj_SetVisible(objHeader, false);
            Obj_SetVisible(objText, false);
            Obj_SetVisible(objClose, false);
            Obj_SetVisible(objMinimize, false);
        }

        yield;
    }
    Obj_Delete(objHeader);
    Obj_Delete(objText);
    Obj_Delete(objClose);
    Obj_Delete(objMinimize);
}

// Draws Window and Window Components
task __LIB_REITOS_WINDOW_Draw(objWindow) {
    let status = Obj_GetValueD(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_CLOSED);
    while (status != REITOS_WINDOW_STATUS_CLOSED) {
        // Handle clicks. Body: If Foreground, nothing changes. If Background, then set to foreground. Componenets handled seperately.
        let mx = GetCommonData("reitos_mouse_x", 0);
        let my = GetCommonData("reitos_mouse_y", 0);
        if (Mouse_OnWindow(objWindow)) {
            if (GetCommonData("reitos_mouse_statel", KEY_FREE) == KEY_PUSH && Obj_GetValueD(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_CLOSED) == REITOS_WINDOW_STATUS_BACKGROUND) {
                Obj_SetValue(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_FOREGROUND);
                // Notify package that existing foreground window must be moved to background
                NotifyEventAll(EV_USER_PACKAGE + 12, objWindow);
            }
        }

        // Handle drawing. Must occur last.
        status = Obj_GetValueD(objWindow, "reitos_window_status", REITOS_WINDOW_STATUS_CLOSED);
        let components = Obj_GetValueD(objWindow, "reitos_window_components", []);
        if (status == REITOS_WINDOW_STATUS_FOREGROUND) {
            Obj_SetVisible(objWindow, true);
            ObjRender_SetPosition(objWindow, Obj_GetValueD(objWindow, "reitos_window_x", 0), Obj_GetValueD(objWindow, "reitos_window_y", 0), 0);
            Obj_SetRenderPriorityI(objWindow, 90);
            ascent(i in 0..length(components)) {
                Obj_SetVisible(components[i], true);
                ObjRender_SetPosition(components[i], Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(components[i], "window_position", [0, 0])[0], Obj_GetValueD(objWindow, "reitos_window_y", 0) + Obj_GetValueD(components[i], "window_position", [0, 0])[1] + REITOS_WINDOW_HEADER_SIZE, 0);
                Obj_SetRenderPriorityI(components[i], 90 + Obj_GetValueD(components[i], "window_layer", 0));
            }
        } else if (status == REITOS_WINDOW_STATUS_BACKGROUND) {
            Obj_SetVisible(objWindow, true);
            ObjRender_SetPosition(objWindow, Obj_GetValueD(objWindow, "reitos_window_x", 0), Obj_GetValueD(objWindow, "reitos_window_y", 0), 0);
            Obj_SetRenderPriorityI(objWindow, 10);
            ascent(i in 0..length(components)) {
                Obj_SetVisible(components[i], true);
                ObjRender_SetPosition(components[i], Obj_GetValueD(objWindow, "reitos_window_x", 0) + Obj_GetValueD(components[i], "window_position", [0, 0])[0], Obj_GetValueD(objWindow, "reitos_window_y", 0) + Obj_GetValueD(components[i], "window_position", [0, 0])[1] + REITOS_WINDOW_HEADER_SIZE, 0);
                Obj_SetRenderPriorityI(components[i], 10 + Obj_GetValueD(components[i], "window_layer", 0));
            }
        } else if (status == REITOS_WINDOW_STATUS_MINIMIZED) {
            Obj_SetVisible(objWindow, false);
            ascent(i in 0..length(components)) {
                Obj_SetVisible(components[i], false);
            }
        }

        yield;
    }
    ObjWindow_Destroy(objWindow);
}
